// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transfer.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO transfer (source_account_id,
                      destination_account_id,
                      amount)
VALUES ($1, $2, $3)
RETURNING id, source_account_id, destination_account_id, amount, created_at
`

type CreateTransferParams struct {
	SourceAccountID      int64 `json:"source_account_id"`
	DestinationAccountID int64 `json:"destination_account_id"`
	Amount               int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.SourceAccountID, arg.DestinationAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SourceAccountID,
		&i.DestinationAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransfer = `-- name: DeleteTransfer :exec
DELETE
FROM transfer
WHERE id = $1
`

func (q *Queries) DeleteTransfer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransfer, id)
	return err
}

const getInboundTransfersForAccount = `-- name: GetInboundTransfersForAccount :many
SELECT id, source_account_id, destination_account_id, amount, created_at
FROM transfer
WHERE destination_account_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type GetInboundTransfersForAccountParams struct {
	DestinationAccountID int64 `json:"destination_account_id"`
	Limit                int32 `json:"limit"`
	Offset               int32 `json:"offset"`
}

func (q *Queries) GetInboundTransfersForAccount(ctx context.Context, arg GetInboundTransfersForAccountParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getInboundTransfersForAccount, arg.DestinationAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SourceAccountID,
			&i.DestinationAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOutboundTransfersForAccount = `-- name: GetOutboundTransfersForAccount :many
SELECT id, source_account_id, destination_account_id, amount, created_at
FROM transfer
WHERE source_account_id = $1
ORDER BY id
LIMIT $2 OFFSET $3
`

type GetOutboundTransfersForAccountParams struct {
	SourceAccountID int64 `json:"source_account_id"`
	Limit           int32 `json:"limit"`
	Offset          int32 `json:"offset"`
}

func (q *Queries) GetOutboundTransfersForAccount(ctx context.Context, arg GetOutboundTransfersForAccountParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getOutboundTransfersForAccount, arg.SourceAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SourceAccountID,
			&i.DestinationAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfer = `-- name: GetTransfer :one
SELECT id, source_account_id, destination_account_id, amount, created_at
FROM transfer
WHERE id = $1
`

func (q *Queries) GetTransfer(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, getTransfer, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SourceAccountID,
		&i.DestinationAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfers = `-- name: GetTransfers :many
SELECT id, source_account_id, destination_account_id, amount, created_at
FROM transfer
ORDER BY id
LIMIT $1 OFFSET $2
`

type GetTransfersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTransfers(ctx context.Context, arg GetTransfersParams) ([]Transfer, error) {
	rows, err := q.db.QueryContext(ctx, getTransfers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transfer{}
	for rows.Next() {
		var i Transfer
		if err := rows.Scan(
			&i.ID,
			&i.SourceAccountID,
			&i.DestinationAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransfer = `-- name: UpdateTransfer :one
UPDATE transfer
SET amount = $2
WHERE id = $1
RETURNING id, source_account_id, destination_account_id, amount, created_at
`

type UpdateTransferParams struct {
	ID     int64 `json:"id"`
	Amount int64 `json:"amount"`
}

func (q *Queries) UpdateTransfer(ctx context.Context, arg UpdateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, updateTransfer, arg.ID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.SourceAccountID,
		&i.DestinationAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
